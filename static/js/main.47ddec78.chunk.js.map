{"version":3,"sources":["form.js","todo.js","list.js","App.js","serviceWorker.js","index.js"],"names":["Form","state","testo","handleChange","event","setState","target","name","value","handleSubmit","preventDefault","trim","props","onSubmit","completato","id","shortid","generate","this","type","onChange","placeholder","onClick","Component","style","display","justifyContent","textDecoration","todo","seEliminato","toggleComplete","List","todoList","todoCompletati","handleElimina","filter","handleEliminaCompletati","handleReset","addTodo","push","map","eliminaCompletati","disabled","length","key","Header","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.47ddec78.chunk.js","sourcesContent":["import React, { Component } from \"react\"\r\nimport shortid from \"shortid\"\r\n\r\n\r\nclass Form extends Component {\r\n\r\n  state = {\r\n    testo: \"\"\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    this.setState({\r\n      [event.target.name]: event.target.value\r\n    })\r\n  }\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault()\r\n    if (this.state.testo.trim() !== '')\r\n      this.props.onSubmit({\r\n        testo: this.state.testo,\r\n        completato: false,\r\n        id: shortid.generate()\r\n      })\r\n    this.setState({\r\n      testo: \"\"\r\n    })\r\n  }\r\n\r\n  render(testo) {\r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n        <input type=\"text\" name=\"testo\" onChange={this.handleChange} placeholder=\"contenuto da aggiungere\" value={this.state.testo} />\r\n        <button onClick={this.handleSubmit}>aggiungi</button>\r\n      </form>\r\n\r\n    )\r\n  }\r\n}\r\n\r\nexport default Form","import React from \"react\"\r\n\r\nexport default (props) => (\r\n    <div style={{\r\n        display: \"flex\",\r\n        justifyContent: \"center\"\r\n    }}>\r\n\r\n        <div style={{\r\n            textDecoration: props.todo.completato ? \"line-through\" : \"\"\r\n        }}>{props.todo.testo}</div>\r\n        <button onClick={props.seEliminato}>✗</button>\r\n        <button onClick={props.toggleComplete}>✓</button>\r\n    </div>\r\n)","import React, { Component } from \"react\"\r\nimport Form from './form.js';\r\nimport Todo from './todo.js';\r\n\r\nclass List extends Component {\r\n    state = {\r\n        todoList: [],\r\n        todoCompletati: 0\r\n    }\r\n\r\n    handleElimina = (id) => {\r\n        this.setState({\r\n            todoList: this.state.todoList.filter(todo => todo.id !== id),\r\n            todoCompletati: this.state.todoCompletati - 1\r\n        })\r\n    }\r\n\r\n    handleEliminaCompletati = () => {\r\n        this.setState({\r\n            todoList: this.state.todoList.filter(todo => !todo.completato),\r\n            todoCompletati: 0\r\n        })\r\n    }\r\n\r\n    handleReset = () => {\r\n        this.setState({\r\n            todoList: [],\r\n            todoCompletati: 0\r\n        })\r\n    }\r\n\r\n    addTodo = (todo) => {\r\n\r\n        this.state.todoList.push(todo)\r\n        this.setState({\r\n            todoList: [...this.state.todoList]\r\n        })\r\n    }\r\n\r\n    toggleComplete = (id) => {\r\n        this.setState({\r\n            todoList: this.state.todoList.map(todo => {\r\n                if (todo.id === id) {\r\n                    if (todo.completato === false)\r\n                        this.setState({ todoCompletati: this.state.todoCompletati + 1 })\r\n                    else\r\n                        this.setState({ todoCompletati: this.state.todoCompletati - 1 })\r\n                    if (this.state.todoCompletati >= 1)\r\n                        this.eliminaCompletati = false\r\n                    return {\r\n                        ...todo,\r\n                        completato: !todo.completato\r\n                    }\r\n                }\r\n                else {\r\n                    return todo;\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        return (<div>\r\n            <Form onSubmit={this.addTodo} />\r\n            <div>\r\n\r\n                {\r\n                    this.state.todoCompletati > 0 ?\r\n                        <button onClick={this.handleEliminaCompletati}>Elimina completi</button>\r\n                        :\r\n                        <button disabled onClick={this.handleEliminaCompletati}>Elimina completi</button>\r\n                }\r\n\r\n                {\r\n                    this.state.todoList.length > 0 ?\r\n                        <button onClick={this.handleReset}>Elimina tutto</button>\r\n                        :\r\n                        <button disabled onClick={this.handleReset}>Elimina tutto</button>\r\n                }\r\n\r\n\r\n            </div>\r\n            {\r\n                this.state.todoList.map(todo =>\r\n                    (<Todo key={todo.id} seEliminato={() => this.handleElimina(todo.id)} toggleComplete={() => this.toggleComplete(todo.id)} todo={todo} />))\r\n            }\r\n\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default List","import React, { Component } from 'react';\n\nimport './App.css';\nimport List from './list.js';\n\n/*\nla todo list necessita di:\nbottoni -> aggiungi, togli\ndiv -> dove c'è il todo list \ntextArea -> dove aggiungo elementi al todo list\n*/\n\nclass Header extends Component{\n  render(){\n    return(\n      <header>\n          <h1>TODO List</h1>\n      </header>\n    )\n  }\n}\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header/>\n      \n      <List/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}